# -*- coding: utf-8 -*-
"""ADS_phase3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JyJ1rR9FM5APdF24U0DrawPAM8Qzr9Tu
"""

pip install tensorflow pandas

import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, LSTM, Dense, Dropout, Flatten

# Load your stock price dataset
# Replace 'your_dataset.csv' with the actual filename
data = pd.read_csv('MSFT.csv')

# Data preprocessing
# Assuming your dataset has a 'Date' column and a 'Close' column
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)

# Normalize the data
scaler = MinMaxScaler()
data['Close'] = scaler.fit_transform(data[['Close']])

# Prepare data for training
sequence_length = 60  # Adjust as needed
X = []
y = []

for i in range(sequence_length, len(data)):
    X.append(data['Close'][i - sequence_length:i].values)
    y.append(data['Close'][i])

X = np.array(X)
y = np.array(y)

# Split data into training and testing sets
split_ratio = 0.8
split_index = int(len(X) * split_ratio)

X_train, X_test = X[:split_index], X[split_index:]
y_train, y_test = y[:split_index], y[split_index:]

# Build the CNN-LSTM model
model = Sequential([
    Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(sequence_length, 1)),
    LSTM(units=50, return_sequences=True),
    LSTM(units=50),
    Dense(units=1)
])

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=64, validation_data=(X_test, y_test))

# Evaluate the model
train_loss = model.evaluate(X_train, y_train)
test_loss = model.evaluate(X_test, y_test)

print(f'Training Loss: {train_loss}')
print(f'Testing Loss: {test_loss}')

# Make predictions
predicted_prices = model.predict(X_test)

# You can convert the predictions back to the original scale if needed
predicted_prices = scaler.inverse_transform(predicted_prices)

# Visualize the results and analyze further
# You may want to use libraries like matplotlib or plotly for visualization